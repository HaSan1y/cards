(()=>{"use strict";const e=SimpleWebAuthnBrowser;console.log("Script loaded"),document.querySelector("[data-email]");const t=document.querySelector("[data-modal]"),o=document.querySelector("[data-close]"),n="https://db-2-cards.vercel.app"===window.location.origin?"https://db-2-cards.vercel.app/api/":"http://localhost:8888"===window.location.origin?"http://localhost:8888/.netlify/functions/N":"https://elegant-bubblegum-a62895.netlify.app"===window.location.origin?"https://elegant-bubblegum-a62895.netlify.app/.netlify/functions/N":"http://localhost:3000/api/";function r(e){if(t&&t.querySelector){const o=t.querySelector("[data-content]");o?o.innerText=e:console.error("Modal content element '[data-content]' not found."),"function"==typeof t.showModal?t.showModal():console.error("Modal element does not have a showModal method.")}else console.error("Modal element '[data-modal]' not found."),alert(e)}document.addEventListener("DOMContentLoaded",(function(){console.log("DOM fully loaded"),document.getElementById("authForm");const t=document.getElementById("formTitle"),o=document.getElementById("formDescription"),i=document.getElementById("emailGroup"),a=document.getElementById("submitButton"),s=document.getElementById("toggleMode"),l=document.getElementById("toggleLabel"),c=document.getElementById("errorMessage"),d=document.getElementById("successMessage");let u=!0;function g(){u?(t.textContent="Login",o.textContent="Welcome back! Please login to your account.",i.style.display="none",a.textContent="Login with Passkey",a.removeAttribute("data-signup"),a.setAttribute("data-login",""),l.textContent="Need an account?"):(t.textContent="Register",o.textContent="Create a new account to get started.",i.style.display="block",a.textContent="Register with Passkey",a.removeAttribute("data-login"),a.setAttribute("data-signup",""),l.textContent="Already have an account? Login"),c.textContent="",d.textContent="",a&&(a.disabled=!1)}g(),s.addEventListener("change",(function(){u=!u,g()})),a?a.addEventListener("click",(async t=>{t.preventDefault();const o=document.getElementById("username"),i=document.getElementById("email"),s=document.getElementById("password"),l=o.value.trim(),m=i?i.value.trim():"",f=s.value;if(c.textContent="",d.textContent="",l){if(!f||f.length<6)return console.log("Password validation failed"),void(c.textContent="Password is required and must be at least 6 characters long.");if(!u){if(!m)return void(c.textContent="Email is required for registration.");function h(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)}if(!h(m))return void(c.textContent="Please enter a valid email address.")}console.log("Validation passed. Proceeding with",u?"Login":"Registration"),a.disabled=!0,a.textContent=u?"Logging in...":"Registering...";try{u?(console.log("Login attempt"),await async function(t,o){console.log("Login function called");const i=document.getElementById("errorMessage"),a=document.getElementById("successMessage");let s=null,l=null;try{const i=n.endsWith("/")?n:n+"/";console.log(`Calling init-auth for user: ${t}`);const c=await fetch(`${i}init-auth`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({username:t,password:o}),credentials:"include"}),d=await c.json();if(!c.ok)throw new Error(d.error||`Authentication initialization failed (${c.status})`);if(!d.options||!d.challenge||!d.userId)throw console.error("Incomplete data received from init-auth:",d),new Error("Server did not provide necessary data to start passkey login.");const u=d.options;let g;s=d.challenge,l=d.userId,console.log(`init-auth successful. Challenge: ${s}, UserID: ${l}`);try{g=await(0,e.startAuthentication)(u),console.log("startAuthentication successful:",g)}catch(e){if("NotAllowedError"===e.name)throw new Error("Passkey authentication cancelled.");throw console.error("startAuthentication error:",e),new Error("Failed to initiate passkey usage.")}const m={...g,expectedChallenge:s,userId:l};console.log("Calling verify-auth with body:",m);const f=await fetch(`${i}verify-auth`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(m),credentials:"include"}),h=await f.json();if(!f.ok)throw new Error(h.error||`Authentication verification failed (${f.status})`);if(!h.verified)throw new Error(h.error||"Login failed after verification.");{console.log("verify-auth successful.");const e=h.username||t;a.textContent=`Successfully logged in as ${e}!`,r(`Successfully logged in as ${e}!`),document.getElementById("username").value="",document.getElementById("password").value=""}}catch(e){console.error("Login error:",e),i.textContent=e.message||"An unknown login error occurred.",r(e.message||"An unknown login error occurred.")}}(l,f)):(console.log("Signup attempt"),await async function(t,o,i){console.log("Register function called");const a=document.getElementById("errorMessage"),s=document.getElementById("successMessage");let l,c,d=null;try{const a=n.endsWith("/")?n:n+"/",u=await fetch(`${a}init-register?email=${encodeURIComponent(o)}`,{method:"GET",headers:{Accept:"application/json"},credentials:"include"}),g=await u.json();if(!u.ok)throw new Error(g.error||`Registration initialization failed (${u.status})`);if(!(g.options&&g.challenge&&g.userId&&g.email))throw console.error("Incomplete data received from init-register:",g),new Error("Server did not provide necessary data to start passkey registration.");const m=g.options;let f;l=g.challenge,c=g.userId,d=g.email,console.log(`init-register successful. Challenge: ${l}, UserID: ${c}`),o!==d&&console.warn(`Email mismatch between form ('${o}') and init-register response ('${d}'). Using server response.`);try{console.log("Calling startRegistration with options:",m),f=await(0,e.startRegistration)(m),console.log("startRegistration successful:",f)}catch(e){if("InvalidStateError"===e.name||"NotAllowedError"===e.name)throw new Error("Passkey registration cancelled or not supported by browser/authenticator.");throw console.error("startRegistration error:",e),new Error("Failed to initiate passkey creation.")}const h={...f,username:t,email:d,password:i,expectedChallenge:l,userId:c};console.log("Calling verify-register with body:",h);const y=await fetch(`${a}verify-register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(h),credentials:"include"}),p=await y.json();if(!y.ok)throw new Error(p.error||`Registration verification failed (${y.status})`);if(!p.verified)throw new Error(p.error||"Registration failed after verification.");console.log("verify-register successful."),s.textContent=`Successfully registered ${t}! You can now log in.`,r(`Successfully registered ${t}!`),document.getElementById("username").value="",document.getElementById("email").value="",document.getElementById("password").value=""}catch(e){throw console.error("Registration error:",e),a.textContent=e.message||"An unknown registration error occurred.",r(e.message||"An unknown registration error occurred."),e}}(l,m,f))}catch(y){console.error("Unhandled error during auth process:",y),c.textContent=y.message||"An unexpected error occurred."}finally{a&&(a.disabled=!1,g())}}else c.textContent="Username is required."})):console.error("Submit button element not found")})),o.addEventListener("click",(()=>t.close()))})();